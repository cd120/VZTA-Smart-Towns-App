Below is a uml diagram spec, using PlantUML.
To view diagram, install PlantUML plugin for IntelliJ/VSCode



@startuml

package Database <<Database>>{

    entity Checkpoint_Table {
        checkpoint_ID
        --
        trail_ID
        landmark_ID
        name
    }

    entity User_Table {
        username
        --
        password
    }

    entity User_Checkpoints {
        username
        checkpoint_ID
    }

    entity Trail_Table {
        trail_ID
        --
        name
        location
    }

    entity Trail_Checkpoint {
        trail_ID
        checkpoint_ID
    }

    entity Roles {
        role_ID
        --
        name
    }

    entity Users_Roles {
        role_ID
        username
    }

    Trail_Table ||..|| Trail_Checkpoint
    Checkpoint_Table ||..|| Trail_Checkpoint

    Checkpoint_Table }o..|| User_Checkpoints
    User_Table }o..|| User_Checkpoints

    Roles ||--o{ Users_Roles
    User_Table ||--o{ Users_Roles
}


package Models {

    ''''''''''''' Checkpoint Models

    class Checkpoint {
        + Checkpoint();
        - Long id;
        - String name;
        - double[] coordinates;
        - Trail trail;
        - String description;
    }

    interface CheckpointRepository {
        + Checkpoint findCheckpointById(Long checkpoint_id);
        + List<Checkpoint> findCheckpointsByUsername(String username);
        + List<Checkpoint> findCheckpointsByTrailId(Long trail_id);
        + List<Checkpoint> findAllCheckpoints();
        + Long saveCheckpoint(Checkpoint checkpoint);
        + void addCheckpointToUser(Long checkpoint_id, String username);
    }

    class CheckpointRepositoryImpl {
        - JdbcTemplate jdbc
        - RowMapper<Checkpoint> checkpointMapper
        --
        + CheckpointRepositoryImpl(JdbcTemplate aJdbc)
        - setCheckpointMapper()
        - insertCheckpoint(Checkpoint checkpoint) : Long id
        - updateCheckpoint(Checkpoint checkpoint) : Long id
        ... and all methods from CheckpointRepository interface
    }

    CheckpointRepositoryImpl --|> CheckpointRepository
    CheckpointRepositoryImpl --> Checkpoint

    CheckpointRepositoryImpl ..> Checkpoint_Table
    CheckpointRepositoryImpl ..> User_Checkpoints

    ''''''''''''' Trail Models

    class Trail {
        + Trail()
        - Long id;
        - String name;
        - String location;
        - List<Checkpoint> checkpoints;
        - String description;
    }

    interface TrailRepository {
        + findTrailById(Long trail_id);
        + Long saveTrail(Trail trail);
        + List<Trail> findAllTrails();
    }

    class TrailRepositoryImpl {
        - JdbcTemplate jdbc
        - RowMapper<Trail> trailMapper
        --
        + TrailRepositoryImpl(JdbcTemplate aJdbc)
        - Long setTrailMapper()
        - Long updateTrail(Trail trail)
        - Long insertTrail(Trail trail)
        - void saveCheckpoints(Trail trail)
        ... and all methods from TrailRepository interface
    }

    TrailRepositoryImpl --|> TrailRepository
    TrailRepositoryImpl --> Trail

    TrailRepositoryImpl ..> Trail_Table
    TrailRepositoryImpl ..> Trail_Checkpoint

    Trail *- Checkpoint

    '''''''''''''' Profile Models

    class Profile {
        - String username
        - List<Checkpoint> checkpoints
    }

    interface ProfileRepository {
        + getProfile(String username) : Profile
        + saveUser(String username, String password)
    }

    class ProfileRepositoryImpl {
        - JdbcTemplate jdbc
        - RowMapper<Profile> profileMapper
        --
        ProfileRepositoryImpl(JdbcTemplate aJdbc)
        + getProfile(String username) : Profile
        + saveUser(String username, String password)
        - setProfileMapper()
    }

    ProfileRepositoryImpl --|> ProfileRepository
    ProfileRepositoryImpl *- Profile
    ProfileRepositoryImpl ..> User_Table
    ProfileRepositoryImpl ..> CheckpointRepository

    ''''''''''''' Notes
    note "QR codes can be mapped to checkpoint IDs, so when one is scanned,\n it gets the checkpoint by ID, and adds it to the user_checkpoints table " as n2
    note "to create trail:\n save trail name to trail table and get trail_ID\n for each checkpoint in the trail:\n   save checkpoint to checkpoint table and get checkpoint_ID\n   add trail_ID and checkpoint_ID to Trail_Checkpoint" as n1

}

package Services {
    ''''''''''''' Trail

    interface TrailService {
        + Long createTrail(Trail trail);
        + List<Trail> getAllTrails();
        + Trail getTrailById(Long id);
    }

    class TrailServiceImpl {
        - TrailRepository trailRepository
        --
        + TrailServiceImpl(TrailRepository trailRepository)
        ... and all methods from TrailService interface
    }

    TrailServiceImpl --|> TrailService
    TrailServiceImpl *-- TrailRepository


    ''''''''''''' Checkpoint

    interface CheckpointService {
        + Checkpoint getCheckpointById(Long checkpoint_id);
        + List<Checkpoint> getCheckpointsByUsername(String username);
        + List<Checkpoint> getCheckpointsByTrailId(Long trail_id);
        + List<Checkpoint> getAllCheckpoints();
        + Long createCheckpoint(Checkpoint checkpoint);
        + void addCheckpointToUser(Long checkpoint_id, String use
    }

    class CheckpointServiceImpl {
        - CheckpointRepository checkpointRepository
        --
        + CheckpointServiceImpl(CheckpointRepository checkpointRepository)
        ... and all methods from CheckpointService interface
    }

    CheckpointServiceImpl --|> CheckpointService
    CheckpointServiceImpl *-- CheckpointRepository

    ''''''''''''' Profile

    interface ProfileService {
        + getUser(Long user_id) : User, User.medals, User.checkpoints
        + addUser(String username, String password)
    }

    class ProfileServiceImpl {
        - ProfileRepository profileRepository
        --
        + getUser(Long user_id) : User, User.checkpoints
        + addUser(String username, String password)
    }

    ProfileServiceImpl --|> ProfileService
    ProfileServiceImpl *- ProfileRepository

}


package Security {
    class SecurityConfig {
        - DataSource dataSource
        + String[] ENDPOINTS_WHITELIST
        --
        + passwordEncoder() : PasswordEncoder
        + securityFilterChain(HttpSecurity http) : SecurityFilterChain
        - userDetailsService : UserDetailsService
    }
}


package Controllers {
    ''''''''''' Trails

    class TrailController {
        @GET /trails (get all trails)
        @GET /trails/{id} (get all trails, get all checkpoints for user)
        @GET /trails/{id}/leaderboard (calculate highest users for each trail?)
        @POST /scan (map qr code to checkpoint_id, add checkpoint to user_id from session)
    }

    class TrailManagementController {
        @GET /trails/add (add new trails form)
        @POST /trails/add (add new trail, admin only)
        @POST /trails/{id}/delete (delete a trail, admin only)
    }

    TrailController ..> TrailService
    TrailController ..> CheckpointService
    TrailManagementController ..> TrailService

    '''''''''''' Profile
    class ProfileController {
        @GET /profile (get user profile)
    }

    ProfileController ..> ProfileService

    ''''''''''' Security

    class AuthController {
        @GET /login (get login page, post handled by security)
        @GET /signup (signup form)
        @POST /signup (post signup form)
        @GET /logout (end session)
    }

    AuthController ..> SecurityConfig

}





@enduml